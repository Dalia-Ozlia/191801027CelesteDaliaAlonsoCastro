package Vista;

import DaoOzliaMae.DaoEmpleado;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author celes
 */
public class IngresarUsuario extends javax.swing.JFrame {

    /**
     * Creates new form IngresarUsuario
     */
    public int opcion,operacion;
    public IngresarUsuario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TextUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        TextPassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Candara Light", 0, 24)); // NOI18N
        jLabel1.setText("Ingresar");

        jLabel2.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        jLabel2.setText("Usuario:");

        TextUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextUsuarioActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        jLabel3.setText("Contrase√±a:");

        jButton1.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        jButton1.setText("Ingresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Handwriting", 1, 36)); // NOI18N
        jLabel4.setText("OzLiaMae");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(132, 132, 132))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TextUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextUsuarioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int empID;
        String password;
        boolean accesoPass;
        
        switch (opcion){
            case 1:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
                
                try {
                    accesoPass = DaoEmpleado.acceso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    MenuOzLia ozLia = new MenuOzLia();
                    ozLia.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 2:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    NuevoEmpleado nuevoEmpleado = new NuevoEmpleado();
                    nuevoEmpleado.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 3:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    Actualizar actualizar = new Actualizar();
                    actualizar.operacion = operacion;
                    actualizar.etiquetaID(operacion);
                    actualizar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 4:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    Actualizar actualizar = new Actualizar();
                    actualizar.operacion = operacion;
                    actualizar.etiquetaID(operacion);
                    actualizar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 5:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    Actualizar actualizar = new Actualizar();
                    actualizar.operacion = operacion;
                    actualizar.etiquetaID(operacion);
                    actualizar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 6:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    Eliminar eliminar = new Eliminar();
                    eliminar.operacion = operacion;
                    eliminar.etiquetaID(operacion);
                    eliminar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 7:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    EmpVer empVer = new EmpVer();
                    empVer.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 8:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    Eliminar eliminar = new Eliminar();
                    eliminar.operacion = operacion;
                    eliminar.etiquetaID(operacion);
                    eliminar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 9:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.acceso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    MattoAbrir mattoAbrir = new MattoAbrir();
                    mattoAbrir.setVisible(true);
                    mattoAbrir.empID = empID;
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 10:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.acceso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (accesoPass == true){
                    MattoCerrar mattoCerrar = new MattoCerrar();
                    mattoCerrar.setVisible(true);
                    mattoCerrar.empID = empID;
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 11:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
            
                if (accesoPass == true){
                    Eliminar eliminar = new Eliminar();
                    eliminar.operacion = operacion;
                    eliminar.etiquetaID(operacion);
                    eliminar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
            case 12:
                empID = Integer.valueOf(TextUsuario.getText());
                password = TextPassword.getText();
                accesoPass = false;
            
                try {
                    accesoPass = DaoEmpleado.permiso(empID, password);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresarUsuario.class.getName()).log(Level.SEVERE, null, ex);
                }
            
                if (accesoPass == true){
                    Eliminar eliminar = new Eliminar();
                    eliminar.operacion = operacion;
                    eliminar.etiquetaID(operacion);
                    eliminar.setVisible(true);
                    dispose();
                }
                else {
                    ErrorPassword error = new ErrorPassword();
                    error.setVisible(true);
                    error.opcion = opcion;
                    dispose();
                }
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField TextPassword;
    private javax.swing.JTextField TextUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private Eliminar etiquetaID(int operacion) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
